% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/continuous_table.R
\name{pt_cont_long}
\alias{pt_cont_long}
\title{Continuous data summary in long format}
\usage{
pt_cont_long(
  data,
  cols,
  panel = ".total",
  by = NULL,
  table = NULL,
  units = NULL,
  digits = new_digits(),
  summarize_all = TRUE,
  all_name = "All data",
  fun = cont_long_fun,
  na_action = c("omit", "pass"),
  na_fill = "--",
  id_col = "ID"
)
}
\arguments{
\item{data}{the data frame to summarize; the user should filter or subset
so that \code{data} contains exactly the records to be summarized; pmtables will
not add or remove rows prior to summarizing \code{data}}

\item{cols}{the columns to summarize; may be character vector or quosure}

\item{panel}{data set column name to stratify the summary}

\item{by}{a grouping variable that will silently overwrite the value of
\code{panel} if \code{panel} is also passed; see details and the differences in table
output when either \code{panel} or \code{by} are passed}

\item{table}{a named list to use for renaming columns (see details and
examples)}

\item{units}{a named list to use for unit lookup (see details and examples)}

\item{digits}{a \code{digits} object (see \code{\link[=new_digits]{new_digits()}})}

\item{summarize_all}{if \code{TRUE} then a complete data summary will be appended
to the bottom of the table}

\item{all_name}{a name to use for the complete data summary}

\item{fun}{the data summary function (see details)}

\item{na_action}{how to handle summaries that consiste of all missing values;
if \code{omit}, try to omit this summary from the output; if \code{pass}, pass along
a placeholder row or column filled with the value in \code{na_fill}}

\item{na_fill}{used when \code{na_action} is set to \code{pass}; fills in summaries
when all continuous values are missing}

\item{id_col}{the ID column name}
}
\description{
Continuous data summary in long format
}
\details{
Passing the \code{panel} variable will partition the table in panels defined by
the non-repeating values of that data column, and \code{cols} will form the rows
within each panel. Alternatively, passing in the \code{by} variable will panel by
the different levels of \code{cols} and the levels of \code{by} will form the rows
within each panel.

The summary function (\code{fun}) should take \code{value} as the first argument and
return a data frame or tibble with one row as many columns as you wish to
appear in the table. The function can also accept an \code{id} argument which is
a vector of \code{IDs} that is the same length as \code{value}. Be sure to include
\code{...} to the function signature as other arguments will be passed along.
Make sure your function completely formats the output ... it will appear in
the table as you return from this function. See \code{\link[=cont_long_fun]{cont_long_fun()}} for
details on the default implementation.

The notes for this table are generated by \code{\link[=pt_cont_long_notes]{pt_cont_long_notes()}}.
}
\examples{

ans <- pt_cont_long(pmt_first, cols = dplyr::vars(WT,ALB,CRCL))

ans <- pt_cont_long(pmt_first, cols = "WT,CRCL", panel = "SEXf")

ans <- pt_cont_long(pmt_first, cols = "WT,CRCL", by = "SEXf")

}
