% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yaml-as-df.R
\name{yaml_as_df}
\alias{yaml_as_df}
\title{Read yaml input into data frame}
\usage{
yaml_as_df(path, quiet = FALSE, row_var = ".row")
}
\arguments{
\item{path}{to the yaml source file.}

\item{quiet}{logical; if \code{TRUE}, suppress messages.}

\item{keep.row}{character; column name where row names (from the yaml
source) will be stored; pass \code{NULL} to discard this column of row names.}
}
\value{
A data frame is created from yaml content and returned. The first column
in the data frame is \code{.row}, containing the outer names of the yaml
source (see examples).
}
\description{
Read yaml input into data frame
}
\section{Prototyped tables}{


A prototyped table has one row identified as the prototype and
defines the table column names as well as the required number of
columns. This is similar behavior to what \code{dplyr::tribble()} does.
Specify a prototype column name under \verb{SETUP__:}.
You must provide names for all columns in the prototype.  Other rows
will inherit those names and you must enter a number of columns in
other rows equal to the number found in the prototype. If a prototype row
is used, then other rows do not need to be entered as (named) lists, but
can be entered as arrays; they will be coerced to list and named according
to the prototype.
}

\examples{

path <- system.file("yaml", "table.yml", package = "pmtables")

yaml_as_df(path)

yaml_as_df(path, row_var = NULL)

# Example prototyped table
\dontrun{
file <- system.file("yaml", "prototype.yaml", package = "pmtables")
cat(readLines(file), sep = "\n")
}

}
